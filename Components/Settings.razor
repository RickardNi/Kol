@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject IJSRuntime JS

<div class="settings-overlay @(IsOpen ? "open" : "")">
    <div class="settings-container">
        <div class="settings-header">
            <button class="settings-close-btn" @onclick="CloseSettings" aria-label="Close settings">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-circle-x-icon lucide-circle-x">
                    <circle cx="12" cy="12" r="10" fill="#e60000"/>
                    <path d="m15 9-6 6" stroke="white" stroke-width="2"/>
                    <path d="m9 9 6 6" stroke="white" stroke-width="2"/>
                </svg>
            </button>
        </div>
        
        <div class="settings-content">
            <div class="settings-section">
                <h3>Game</h3>
                <div class="setting-item clickable" @onclick="CycleStartLife">
                    <label>Starting Life</label>
                    <div class="setting-control">
                        <span class="placeholder">@StartLife</span>
                    </div>
                </div>
            </div>
            
            <div class="settings-section">
                <h3>Appearance</h3>
                <div class="setting-item clickable" @onclick="CycleFont">
                    <label>Font</label>
                    <div class="setting-control">
                        <span class="placeholder">@CurrentFontName</span>
                    </div>
                </div>
                <div class="setting-item disabled">
                    <label>Theme</label>
                    <div class="setting-control">
                        <span class="placeholder">Dark</span>
                    </div>
                </div>
                <div class="setting-item disabled">
                    <label>Colors</label>
                    <div class="setting-control">
                        <span class="placeholder">Default</span>
                    </div>
                </div>
            </div>
            
            <div class="settings-section">
                <h3>About</h3>
                <div class="setting-item">
                    <label>GitHub</label>
                    <div class="setting-control">
                        <a href="https://github.com/RickardNi/Kol" target="_blank" class="github-link">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-github">
                                <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"/>
                                <path d="M9 18c-4.51 2-5-2-7-2"/>
                            </svg>
                        </a>
                    </div>
                </div>
                <div class="setting-item">
                    <label>Build</label>
                    <div class="setting-control">
                        <span class="placeholder">@BuildNumber</span>
                    </div>
                </div>
            </div>
            
            <div class="settings-section">
                <div class="tip-item">
                    <span class="tip-text">ðŸ’¡ Long press the icon on the main screen for more options</span>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public string BuildNumber { get; set; } = "dev";
    [Parameter] public EventCallback<string> FontChanged { get; set; }
    [Parameter] public EventCallback<int> StartLifeChanged { get; set; }

    private string currentFont = "Oxanium";
    private readonly string[] availableFonts = { "Oxanium", "Rationale", "Anta" };
    private int currentStartLife = 20;
    private readonly int[] availableStartLives = { 20, 25, 30, 40 };

    public string CurrentFontName => currentFont == "Oxanium" ? "Oxanium (default)" : currentFont;
    public string StartLife => currentStartLife.ToString();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the current font preference from localStorage
            try
            {
                var fontPreference = await JS.InvokeAsync<string>("getFontPreference");
                if (!string.IsNullOrEmpty(fontPreference) && availableFonts.Contains(fontPreference))
                {
                    currentFont = fontPreference;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load font preference: {ex.Message}");
            }

            // Load the current start life preference from localStorage
            try
            {
                var startLifePreference = await JS.InvokeAsync<int>("getStartLifePreference");
                if (availableStartLives.Contains(startLifePreference))
                {
                    currentStartLife = startLifePreference;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load start life preference: {ex.Message}");
            }
        }
    }

    private async Task CloseSettings()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }

    private async Task CycleFont()
    {
        var currentIndex = Array.IndexOf(availableFonts, currentFont);
        var nextIndex = (currentIndex + 1) % availableFonts.Length;
        currentFont = availableFonts[nextIndex];
        
        await FontChanged.InvokeAsync(currentFont);
    }

    private async Task CycleStartLife()
    {
        var currentIndex = Array.IndexOf(availableStartLives, currentStartLife);
        var nextIndex = (currentIndex + 1) % availableStartLives.Length;
        currentStartLife = availableStartLives[nextIndex];
        
        // Save the start life preference to localStorage
        try
        {
            await JS.InvokeVoidAsync("settingsManager.setStartLifePreference", currentStartLife);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to save start life preference: {ex.Message}");
        }
        
        await StartLifeChanged.InvokeAsync(currentStartLife);
    }
} 