@page "/"

@using System.Timers
@inject IJSRuntime JS

<PageTitle>Kol</PageTitle>

<div class="health-tracker">
    <div class="player topPlayer">
        <div class="tap-zone top @(topPlayerTopPressed ? "pressed" : null)"
             @onpointerdown="() => HandlePointerDown(true, true, true)"
             @onpointerup="() => HandlePointerUp(true, true, false)"
             @onpointerleave="() => HandlePointerLeave(true, true, false)"></div>
        <span class="health">@topPlayerHealth</span>
        @if (topPlayerHasChanged)
        {
            <span class="change-counter @(topPlayerChangeCounter > 0 ? "positive" : topPlayerChangeCounter < 0 ? "negative" : "neutral")">@(topPlayerChangeCounter > 0 ? "+" : "")@topPlayerChangeCounter</span>
        }
        <div class="tap-zone bottom @(topPlayerBottomPressed ? "pressed" : null)"
             @onpointerdown="() => HandlePointerDown(true, false, true)"
             @onpointerup="() => HandlePointerUp(true, false, false)"
             @onpointerleave="() => HandlePointerLeave(true, false, false)"></div>
    </div>
    <div class="player bottomPlayer">
        <div class="tap-zone top @(bottomPlayerTopPressed ? "pressed" : null)"
             @onpointerdown="() => HandlePointerDown(false, true, true)"
             @onpointerup="() => HandlePointerUp(false, true, false)"
             @onpointerleave="() => HandlePointerLeave(false, true, false)"></div>
        <span class="health">@bottomPlayerHealth</span>
        @if (bottomPlayerHasChanged)
        {
            <span class="change-counter @(bottomPlayerChangeCounter > 0 ? "positive" : bottomPlayerChangeCounter < 0 ? "negative" : "neutral")">@(bottomPlayerChangeCounter > 0 ? "+" : "")@bottomPlayerChangeCounter</span>
        }
        <div class="tap-zone bottom @(bottomPlayerBottomPressed ? "pressed" : null)"
             @onpointerdown="() => HandlePointerDown(false, false, true)"
             @onpointerup="() => HandlePointerUp(false, false, false)"
             @onpointerleave="() => HandlePointerLeave(false, false, false)"></div>
    </div>
</div>

<div class="reset-container">
    <button class="reset-btn" @onclick="ResetHealth" aria-label="Reset health">
        <svg viewBox="0 0 24 24" width="48" height="48" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="1 4 1 10 7 10" />
            <path d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10" />
        </svg>
    </button>
</div>

@code {
    private const int StartHealth = 20;
    private const int VibrationDuration = 30;
    private int topPlayerHealth = StartHealth;
    private int bottomPlayerHealth = StartHealth;

    private int topPlayerChangeCounter = 0;
    private int bottomPlayerChangeCounter = 0;
    private bool topPlayerHasChanged = false;
    private bool bottomPlayerHasChanged = false;
    private Timer topPlayerChangeTimer;
    private Timer bottomPlayerChangeTimer;

    private bool topPlayerTopPressed = false;
    private bool topPlayerBottomPressed = false;
    private bool bottomPlayerTopPressed = false;
    private bool bottomPlayerBottomPressed = false;

    private bool isLongPress = false;

    private async void HandlePointerDown(bool isTopPlayer, bool isTop, bool pressed)
    {
        SetPressed(isTopPlayer, isTop, pressed);
        isLongPress = false;
        
        // Start long press timer
        await JS.InvokeVoidAsync("startLongPress", DotNetObjectReference.Create(this), isTop);
    }

    private async void HandlePointerUp(bool isTopPlayer, bool isTop, bool pressed)
    {
        SetPressed(isTopPlayer, isTop, pressed);
        
        // Cancel long press and handle short press
        await JS.InvokeVoidAsync("cancelLongPress");
        
        if (!isLongPress)
        {
            if (isTop)
                IncreaseHealth(isTopPlayer);
            else
                DecreaseHealth(isTopPlayer);
        }
    }

    private async void HandlePointerLeave(bool isTopPlayer, bool isTop, bool pressed)
    {
        SetPressed(isTopPlayer, isTop, pressed);
        await JS.InvokeVoidAsync("cancelLongPress");
    }

    [JSInvokable]
    public async void OnLongPress(bool isIncrease)
    {
        isLongPress = true;
        // Determine which player and zone based on current state
        bool isTopPlayer = topPlayerTopPressed || topPlayerBottomPressed;
        bool isTop = topPlayerTopPressed || bottomPlayerTopPressed;
        
        LongPressHealth(isTopPlayer, isIncrease);
    }

    private async void SetPressed(bool isTopPlayer, bool isTop, bool pressed)
    {
        if (isTopPlayer)
        {
            if (isTop) topPlayerTopPressed = pressed;
            else topPlayerBottomPressed = pressed;
        }
        else
        {
            if (isTop) bottomPlayerTopPressed = pressed;
            else bottomPlayerBottomPressed = pressed;
        }
        if (pressed)
        {
            await JS.InvokeVoidAsync("vibrate", VibrationDuration);
        }
    }

    private async void IncreaseHealth(bool isTopPlayer)
    {
        if (isTopPlayer)
        {
            topPlayerHealth++;
            UpdateChangeCounter(true, 1);
        }
        else
        {
            bottomPlayerHealth++;
            UpdateChangeCounter(false, 1);
        }
        
        await JS.InvokeVoidAsync("playHealthIncrease");
    }

    private async void DecreaseHealth(bool isTopPlayer)
    {
        if (isTopPlayer)
        {
            topPlayerHealth--;
            UpdateChangeCounter(true, -1);
        }
        else
        {
            bottomPlayerHealth--;
            UpdateChangeCounter(false, -1);
        }
        
        await JS.InvokeVoidAsync("playHealthDecrease");
    }

    private async void LongPressHealth(bool isTopPlayer, bool isIncrease)
    {
        int change = isIncrease ? 10 : -10;
        if (isTopPlayer)
        {
            topPlayerHealth += change;
            UpdateChangeCounter(true, change);
        }
        else
        {
            bottomPlayerHealth += change;
            UpdateChangeCounter(false, change);
        }
        
        await JS.InvokeVoidAsync(isIncrease ? "playHealthIncrease" : "playHealthDecrease");
    }

    private void UpdateChangeCounter(bool isTopPlayer, int change)
    {
        if (isTopPlayer)
        {
            topPlayerChangeCounter += change;
            topPlayerHasChanged = true;
            StartChangeTimer(true);
        }
        else
        {
            bottomPlayerChangeCounter += change;
            bottomPlayerHasChanged = true;
            StartChangeTimer(false);
        }
        StateHasChanged();
    }

    private void StartChangeTimer(bool isTopPlayer)
    {
        if (isTopPlayer)
        {
            topPlayerChangeTimer?.Dispose();
            topPlayerChangeTimer = new Timer(3000);
            topPlayerChangeTimer.Elapsed += (sender, e) => ResetChangeCounter(true);
            topPlayerChangeTimer.AutoReset = false;
            topPlayerChangeTimer.Start();
        }
        else
        {
            bottomPlayerChangeTimer?.Dispose();
            bottomPlayerChangeTimer = new Timer(3000);
            bottomPlayerChangeTimer.Elapsed += (sender, e) => ResetChangeCounter(false);
            bottomPlayerChangeTimer.AutoReset = false;
            bottomPlayerChangeTimer.Start();
        }
    }

    private void ResetChangeCounter(bool isTopPlayer)
    {
        if (isTopPlayer)
        {
            topPlayerChangeCounter = 0;
            topPlayerHasChanged = false;
        }
        else
        {
            bottomPlayerChangeCounter = 0;
            bottomPlayerHasChanged = false;
        }
        
        InvokeAsync(StateHasChanged);
    }

    private void ResetHealth()
    {
        topPlayerHealth = StartHealth;
        bottomPlayerHealth = StartHealth;
    }

    public void Dispose()
    {
        topPlayerChangeTimer?.Dispose();
        bottomPlayerChangeTimer?.Dispose();
    }
}

<script>
  window.vibrate = function (duration) {
    if (navigator.vibrate) {
      navigator.vibrate(duration);
    }
  }

  // Wake lock to prevent screen dimming
  let wakeLock = null;

  async function requestWakeLock() {
    try {
      if ('wakeLock' in navigator) {
        wakeLock = await navigator.wakeLock.request('screen');
        console.log('Wake Lock is active');
        
        wakeLock.addEventListener('release', () => {
          console.log('Wake Lock was released');
        });
      }
    } catch (err) {
      console.error('Wake Lock error:', err);
    }
  }

  // Request wake lock when page loads
  document.addEventListener('DOMContentLoaded', requestWakeLock);

  // Force fullscreen and handle viewport
  function setupFullscreen() {
    // Set viewport height properly for mobile browsers
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
    
    // Try to enter fullscreen mode if supported
    if (document.documentElement.requestFullscreen) {
      document.documentElement.requestFullscreen().catch(err => {
        console.log('Fullscreen request failed:', err);
      });
    }
    
    // Handle orientation changes
    window.addEventListener('orientationchange', () => {
      setTimeout(() => {
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
      }, 100);
    });
  }

  // Setup fullscreen on page load
  document.addEventListener('DOMContentLoaded', setupFullscreen);

  // Prevent context menu and long press selection
  document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    return false;
  });

  // Prevent long press selection on all elements
  document.addEventListener('selectstart', function(e) {
    e.preventDefault();
    return false;
  });

  // Prevent drag and drop
  document.addEventListener('dragstart', function(e) {
    e.preventDefault();
    return false;
  });

  // Re-request wake lock when page becomes visible again
  document.addEventListener('visibilitychange', async () => {
    if (wakeLock !== null && document.visibilityState === 'visible') {
      await requestWakeLock();
    }
  });

  // Expose wake lock functions globally
  window.requestWakeLock = requestWakeLock;

  // Sound effects using Web Audio API
  let audioContext = null;

  function initAudio() {
    if (!audioContext) {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
  }

  function playTone(frequency, duration, type = 'sine') {
    initAudio();
    
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
    oscillator.type = type;
    
    gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + duration);
  }

  function playHealthIncrease() {
    playTone(1600, 0.15, 'sine');
  }

  function playHealthDecrease() {
    playTone(800, 0.15, 'sine');
  }

  // Expose sound functions globally
  window.playHealthIncrease = playHealthIncrease;
  window.playHealthDecrease = playHealthDecrease;

  // Long press detection
  let longPressTimer = null;
  let longPressDelay = 500; // 500ms for long press

  function startLongPress(dotNetRef, isIncrease) {
    longPressTimer = setTimeout(() => {
      dotNetRef.invokeMethodAsync('OnLongPress', isIncrease);
    }, longPressDelay);
  }

  function cancelLongPress() {
    if (longPressTimer) {
      clearTimeout(longPressTimer);
      longPressTimer = null;
    }
  }

  // Expose long press functions globally
  window.startLongPress = startLongPress;
  window.cancelLongPress = cancelLongPress;
</script>

<style>
.health-tracker {
    display: flex;
    flex-direction: column;
    height: 100vh;
    height: 100dvh;
    height: 100%;
    height: calc(var(--vh, 1vh) * 100);
    margin: 0;
    padding: 0;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100vw;
    width: 100%;
    min-height: 100vh;
    min-height: 100dvh;
    min-height: calc(var(--vh, 1vh) * 100);
    min-height: -webkit-fill-available;
    /* Ensure it covers the entire viewport including status bar area */
    margin-top: calc(-1 * env(safe-area-inset-top));
    margin-bottom: calc(-1 * env(safe-area-inset-bottom));
    margin-left: calc(-1 * env(safe-area-inset-left));
    margin-right: calc(-1 * env(safe-area-inset-right));
    /* Prevent text selection and context menus */
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
}
.player {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: relative;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
}
.topPlayer {
    background: #000;
    color: #e74c6f;
    transform: rotate(180deg);
}
.bottomPlayer {
    background: #000;
    color: #4c6fe7;
}
.health {
    font-size: 12rem;
    font-weight: 600;
    user-select: none;
    z-index: 2;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
}

.change-counter {
    font-size: 3rem;
    font-weight: 600;
    user-select: none;
    z-index: 3;
    position: absolute;
    top: 25%;
    left: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
}

.change-counter.positive {
    color: #4CAF50;
}

.change-counter.negative {
    color: #f44336;
}

.change-counter.neutral {
    color: #ffffff;
}
.tap-zone {
    width: 100%;
    height: 50%;
    position: absolute;
    left: 0;
    z-index: 1;
    background: transparent;
    transition: background 0.1s;
    /* Prevent text selection and context menus */
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
}
.tap-zone.top {
    top: 0;
}
.tap-zone.bottom {
    bottom: 0;
}
.tap-zone.pressed {
    background: rgba(255,255,255,0.08);
}

/* Accent color highlighting for pressed zones */
.topPlayer .tap-zone.pressed {
    background: rgba(231, 76, 111, 0.8);
}

.bottomPlayer .tap-zone.pressed {
    background: rgba(76, 111, 231, 0.8);
}

/* Rounded corners for upper zones closest to middle when pressed */
.topPlayer .tap-zone.top.pressed {
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
}

.bottomPlayer .tap-zone.top.pressed {
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
}
body, html {
    height: 100vh;
    height: 100dvh;
    height: 100%;
    height: calc(var(--vh, 1vh) * 100);
    margin: 0;
    padding: 0;
    background: #000;
    overflow: hidden;
    touch-action: none;
    font-family: 'Oxanium', monospace;
    /* Prevent text selection and context menus */
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
    /* Fullscreen mobile optimizations */
    padding-top: env(safe-area-inset-top);
    padding-bottom: env(safe-area-inset-bottom);
    padding-left: env(safe-area-inset-left);
    padding-right: env(safe-area-inset-right);
    /* Force fullscreen on mobile */
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100vw;
    width: 100%;
    min-height: 100vh;
    min-height: 100dvh;
    min-height: calc(var(--vh, 1vh) * 100);
    min-height: -webkit-fill-available;
}

/* Ensure the app container is also fullscreen */
#app {
    height: 100vh;
    height: 100dvh;
    height: 100%;
    height: calc(var(--vh, 1vh) * 100);
    width: 100vw;
    width: 100%;
    margin: 0;
    padding: 0;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    overflow: hidden;
    background: #000;
}

/* Hide any loading elements that might cause spacing */
.loading-progress {
    display: none;
}
.reset-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
}
.reset-btn {
    background: rgba(0,0,0,0.7);
    border: none;
    border-radius: 50%;
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background 0.2s, box-shadow 0.2s;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    color: #fff;
    outline: none;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
}
.reset-btn:active {
    background: #222;
}
.reset-btn svg {
    display: block;
}
</style>
