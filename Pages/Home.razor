@page "/"

@inject IJSRuntime JS

<PageTitle>Kol</PageTitle>

<div class="health-tracker">
    <div class="player topPlayer">
        <div class="tap-zone top @(topPlayerTopPressed ? "pressed" : null)"
             @onpointerdown="() => SetPressed(true, true, true)"
             @onpointerup="() => SetPressed(true, true, false)"
             @onpointerleave="() => SetPressed(true, true, false)"
             @onclick="() => IncreaseHealth(true)"></div>
        <span class="health">@topPlayerHealth</span>
        <div class="tap-zone bottom @(topPlayerBottomPressed ? "pressed" : null)"
             @onpointerdown="() => SetPressed(true, false, true)"
             @onpointerup="() => SetPressed(true, false, false)"
             @onpointerleave="() => SetPressed(true, false, false)"
             @onclick="() => DecreaseHealth(true)"></div>
    </div>
    <div class="player bottomPlayer">
        <div class="tap-zone top @(bottomPlayerTopPressed ? "pressed" : null)"
             @onpointerdown="() => SetPressed(false, true, true)"
             @onpointerup="() => SetPressed(false, true, false)"
             @onpointerleave="() => SetPressed(false, true, false)"
             @onclick="() => IncreaseHealth(false)"></div>
        <span class="health">@bottomPlayerHealth</span>
        <div class="tap-zone bottom @(bottomPlayerBottomPressed ? "pressed" : null)"
             @onpointerdown="() => SetPressed(false, false, true)"
             @onpointerup="() => SetPressed(false, false, false)"
             @onpointerleave="() => SetPressed(false, false, false)"
             @onclick="() => DecreaseHealth(false)"></div>
    </div>
</div>

<div class="reset-container">
    <button class="reset-btn" @onclick="ResetHealth" aria-label="Reset health">
        <svg viewBox="0 0 24 24" width="48" height="48" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="1 4 1 10 7 10" />
            <path d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10" />
        </svg>
    </button>
</div>

@code {
    private const int StartHealth = 20;
    private const int VibrationDuration = 30;
    private int topPlayerHealth = StartHealth;
    private int bottomPlayerHealth = StartHealth;

    private bool topPlayerTopPressed = false;
    private bool topPlayerBottomPressed = false;
    private bool bottomPlayerTopPressed = false;
    private bool bottomPlayerBottomPressed = false;

    private async void SetPressed(bool isTopPlayer, bool isTop, bool pressed)
    {
        if (isTopPlayer)
        {
            if (isTop) topPlayerTopPressed = pressed;
            else topPlayerBottomPressed = pressed;
        }
        else
        {
            if (isTop) bottomPlayerTopPressed = pressed;
            else bottomPlayerBottomPressed = pressed;
        }
        if (pressed)
        {
            await JS.InvokeVoidAsync("vibrate", VibrationDuration);
        }
    }

    private async void IncreaseHealth(bool isTopPlayer)
    {
        if (isTopPlayer)
            topPlayerHealth++;
        else
            bottomPlayerHealth++;
        
        await JS.InvokeVoidAsync("playHealthIncrease");
    }

    private async void DecreaseHealth(bool isTopPlayer)
    {
        if (isTopPlayer)
            topPlayerHealth--;
        else
            bottomPlayerHealth--;
        
        await JS.InvokeVoidAsync("playHealthDecrease");
    }

    private void ResetHealth()
    {
        topPlayerHealth = StartHealth;
        bottomPlayerHealth = StartHealth;
    }
}

<script>
  window.vibrate = function (duration) {
    if (navigator.vibrate) {
      navigator.vibrate(duration);
    }
  }

  // Wake lock to prevent screen dimming
  let wakeLock = null;

  async function requestWakeLock() {
    try {
      if ('wakeLock' in navigator) {
        wakeLock = await navigator.wakeLock.request('screen');
        console.log('Wake Lock is active');
        
        wakeLock.addEventListener('release', () => {
          console.log('Wake Lock was released');
        });
      }
    } catch (err) {
      console.error('Wake Lock error:', err);
    }
  }

  // Request wake lock when page loads
  document.addEventListener('DOMContentLoaded', requestWakeLock);

  // Re-request wake lock when page becomes visible again
  document.addEventListener('visibilitychange', async () => {
    if (wakeLock !== null && document.visibilityState === 'visible') {
      await requestWakeLock();
    }
  });

  // Expose wake lock functions globally
  window.requestWakeLock = requestWakeLock;

  // Sound effects using Web Audio API
  let audioContext = null;

  function initAudio() {
    if (!audioContext) {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
  }

  function playTone(frequency, duration, type = 'sine') {
    initAudio();
    
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
    oscillator.type = type;
    
    gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + duration);
  }

  function playHealthIncrease() {
    playTone(1600, 0.15, 'sine');
  }

  function playHealthDecrease() {
    playTone(800, 0.15, 'sine');
  }

  // Expose sound functions globally
  window.playHealthIncrease = playHealthIncrease;
  window.playHealthDecrease = playHealthDecrease;
</script>

<style>
.health-tracker {
    display: flex;
    flex-direction: column;
    height: 100vh;
    margin: 0;
    padding: 0;
}
.player {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: relative;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
}
.topPlayer {
    background: #000;
    color: #e74c6f;
    transform: rotate(180deg);
}
.bottomPlayer {
    background: #000;
    color: #4c6fe7;
}
.health {
    font-size: 8rem;
    font-weight: bold;
    user-select: none;
    z-index: 2;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
}
.tap-zone {
    width: 100%;
    height: 50%;
    position: absolute;
    left: 0;
    z-index: 1;
    background: transparent;
    transition: background 0.1s;
}
.tap-zone.top {
    top: 0;
    border-bottom: 1px solid rgba(255,255,255,0.05);
}
.tap-zone.bottom {
    bottom: 0;
    border-top: 1px solid rgba(255,255,255,0.05);
}
.tap-zone.pressed {
    background: rgba(255,255,255,0.08);
}

/* Accent color highlighting for pressed zones */
.topPlayer .tap-zone.pressed {
    background: rgba(231, 76, 111, 0.25);
}

.bottomPlayer .tap-zone.pressed {
    background: rgba(76, 111, 231, 0.25);
}

/* Rounded corners for upper zones closest to middle when pressed */
.topPlayer .tap-zone.top.pressed {
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
}

.bottomPlayer .tap-zone.top.pressed {
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
}
body, html {
    height: 100%;
    margin: 0;
    padding: 0;
    background: #000;
    overflow: hidden;
    touch-action: none;
}
.reset-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
}
.reset-btn {
    background: rgba(0,0,0,0.7);
    border: none;
    border-radius: 50%;
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background 0.2s, box-shadow 0.2s;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    color: #fff;
    outline: none;
}
.reset-btn:active {
    background: #222;
}
.reset-btn svg {
    display: block;
}
</style>
