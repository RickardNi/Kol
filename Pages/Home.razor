@page "/"

@using System.Timers
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS

<PageTitle>Kol</PageTitle>

@* Popup state *@
@code {
    private bool isQuickMenuOpen = false;
    private bool isRollMode = false;
    private bool isSettingsOpen = false;
    private bool isAdvancedOpen = false;
    private int topPlayerRoll = 0;
    private int bottomPlayerRoll = 0;
}

<div class="health-tracker @(isQuickMenuOpen ? "blurred" : null) @(isHistoryOpen ? "history-open" : null)">
    <div class="player topPlayer">
        <div class="tap-zone top @(topPlayerTopPressed ? "pressed" : null)"
             @onpointerdown="() => HandlePointerDown(true, true, true)"
             @onpointerup="() => HandlePointerUp(true, true, false)"
             @onpointerleave="() => HandlePointerLeave(true, true, false)"></div>
        <span class="health">@topPlayerHealth</span>
        @if (topPlayerHasChanged)
        {
            <span class="change-counter @(topPlayerChangeCounter > 0 ? "positive" : topPlayerChangeCounter < 0 ? "negative" : "neutral")">@(topPlayerChangeCounter > 0 ? "+" : "")@topPlayerChangeCounter</span>
        }
        <div class="tap-zone bottom @(topPlayerBottomPressed ? "pressed" : null)"
             @onpointerdown="() => HandlePointerDown(true, false, true)"
             @onpointerup="() => HandlePointerUp(true, false, false)"
             @onpointerleave="() => HandlePointerLeave(true, false, false)"></div>
    </div>
    <div class="player bottomPlayer">
        <div class="tap-zone top @(bottomPlayerTopPressed ? "pressed" : null)"
             @onpointerdown="() => HandlePointerDown(false, true, true)"
             @onpointerup="() => HandlePointerUp(false, true, false)"
             @onpointerleave="() => HandlePointerLeave(false, true, false)"></div>
        <span class="health">@bottomPlayerHealth</span>
        @if (bottomPlayerHasChanged)
        {
            <span class="change-counter @(bottomPlayerChangeCounter > 0 ? "positive" : bottomPlayerChangeCounter < 0 ? "negative" : "neutral")">@(bottomPlayerChangeCounter > 0 ? "+" : "")@bottomPlayerChangeCounter</span>
        }
        <div class="tap-zone bottom @(bottomPlayerBottomPressed ? "pressed" : null)"
             @onpointerdown="() => HandlePointerDown(false, false, true)"
             @onpointerup="() => HandlePointerUp(false, false, false)"
             @onpointerleave="() => HandlePointerLeave(false, false, false)"></div>
    </div>
</div>

@* Roll Display Overlay *@
@if (isRollMode)
{
    <div class="roll-overlay @(isRollContentHidden ? "content-hidden" : "")">
        <div class="roll-container">
            @if (!isRollContentHidden)
            {
                <div class="roll-player top-player @(topPlayerRoll > bottomPlayerRoll ? "winner" : "")">
                    <span class="roll-number">@topPlayerRoll</span>
                </div>
                <div class="roll-player bottom-player @(bottomPlayerRoll > topPlayerRoll ? "winner" : "")">
                    <span class="roll-number">@bottomPlayerRoll</span>
                </div>
            }
            <button class="roll-close-btn @(isRollCloseClicked ? "clicked" : "")" @onclick="CloseRoll" aria-label="Close roll">
                <svg class="close-icon lucide lucide-circle-x-icon lucide-circle-x" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"/>
                    <path d="m15 9-6 6"/>
                    <path d="m9 9 6 6"/>
                </svg>
                <svg class="quick-menu-icon lucide lucide-bolt-icon lucide-bolt" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/>
                    <circle cx="12" cy="12" r="4"/>
                </svg>
            </button>
        </div>
    </div>
}

@* History Display Overlay *@
<div class="history-overlay @(isHistoryOpen ? "open" : "")">
        <div class="history-container">
            <div class="history-header">
                <button class="history-close-btn" @onclick="CloseHistory" aria-label="Close history">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-circle-x-icon lucide-circle-x">
                        <circle cx="12" cy="12" r="10"/>
                        <path d="m15 9-6 6"/>
                        <path d="m9 9 6 6"/>
                    </svg>
                </button>
            </div>
            <div class="history-content">
                <div class="history-start-row">
                    <div class="history-start left-start">@StartHealth</div>
                    <div class="history-start right-start">@StartHealth</div>
                </div>
                <div class="history-scrollable">
                    <div class="history-column left-column">
                        <div class="history-entries">
                            @{
                                var recentHistory = healthHistory.Take(20).ToList();
                                if (recentHistory.Count > 0)
                                {
                                    foreach (var change in recentHistory)
                                    {
                                        if (!change.IsTopPlayer)
                                        {
                                            <div class="history-entry change @(change.ChangeAmount > 0 ? "positive" : "negative")">
                                                <span class="change-amount">@(change.ChangeAmount > 0 ? "+" : "")@change.ChangeAmount</span>
                                                <span class="new-health">@change.NewHealth</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="history-entry empty">
                                                <span class="change-amount">&nbsp;</span>
                                                <span class="new-health">&nbsp;</span>
                                            </div>
                                        }
                                    }
                                }
                            }
                        </div>
                    </div>
                    <div class="history-column right-column">
                        <div class="history-entries">
                            @{
                                if (recentHistory.Count > 0)
                                {
                                    foreach (var change in recentHistory)
                                    {
                                        if (change.IsTopPlayer)
                                        {
                                            <div class="history-entry change @(change.ChangeAmount > 0 ? "positive" : "negative")">
                                                <span class="change-amount">@(change.ChangeAmount > 0 ? "+" : "")@change.ChangeAmount</span>
                                                <span class="new-health">@change.NewHealth</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="history-entry empty">
                                                <span class="change-amount">&nbsp;</span>
                                                <span class="new-health">&nbsp;</span>
                                            </div>
                                        }
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

@* Settings Overlay *@
<Settings IsOpen="isSettingsOpen" IsOpenChanged="HandleSettingsOpenChanged" BuildNumber="@buildNumber" FontChanged="HandleFontChanged" StartLifeChanged="HandleStartLifeChanged" @key="buildNumber" />

@* Advanced Overlay *@
<Advanced IsOpen="isAdvancedOpen" IsOpenChanged="HandleAdvancedOpenChanged" />

<div class="quick-menu-container @(isQuickMenuOpen ? "open" : "")">
    <div class="popup-grid">
        <div class="popup-quadrant top-left">
            <div class="reset-control">
                <button class="reset-btn" @onclick="ResetHealth" aria-label="Reset health">
                    <svg xmlns="http://www.w3.org/2000/svg" width="120" height="120" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rotate-ccw-icon lucide-rotate-ccw">
                        <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/>
                        <path d="M3 3v5h5"/>
                    </svg>
                </button>
                <span class="reset-label">Reset</span>
            </div>
        </div>
        <div class="popup-quadrant top-right">
            <div class="history-control">
                <button class="history-btn" @onclick="OpenHistory" aria-label="View history">
                    <svg xmlns="http://www.w3.org/2000/svg" width="120" height="120" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-history-icon lucide-history">
                        <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/>
                        <path d="M3 3v5h5"/>
                        <path d="M12 7v5l4 2"/>
                    </svg>
                </button>
                <span class="history-label">History</span>
            </div>
        </div>
        <div class="popup-quadrant bottom-left">
            <div class="dice-control">
                <button class="dice-btn" @onclick="RollDice" aria-label="Roll dice">
                    <svg xmlns="http://www.w3.org/2000/svg" width="120" height="120" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-dices-icon lucide-dices">
                        <rect width="12" height="12" x="2" y="10" rx="2" ry="2"/>
                        <path d="m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6"/>
                        <path d="M6 18h.01"/>
                        <path d="M10 14h.01"/>
                        <path d="M15 6h.01"/>
                        <path d="M18 9h.01"/>
                    </svg>
                </button>
                <span class="dice-label">Roll</span>
            </div>
        </div>
        <div class="popup-quadrant bottom-right">
            <div class="settings-control">
                <button class="settings-control-btn" @onclick="OpenSettings" aria-label="Open settings">
                    <svg xmlns="http://www.w3.org/2000/svg" width="120" height="120" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-settings-icon lucide-settings">
                        <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/>
                        <circle cx="12" cy="12" r="3"/>
                    </svg>
                </button>
                <span class="settings-control-label">Settings</span>
            </div>
        </div>
    </div>


</div>

<div class="toggle-btn-container">
    <button class="toggle-btn @(isQuickMenuOpen ? "close" : "quick-menu")" 
            @onclick="ToggleQuickMenu" 
            @onpointerdown="() => HandleToggleButtonPointerDown()"
            @onpointerup="() => HandleToggleButtonPointerUp()"
            @onpointerleave="() => HandleToggleButtonPointerLeave()"
            aria-label="@(isQuickMenuOpen ? "Close quick menu" : "Open quick menu")">
        <svg class="quick-menu-icon lucide lucide-bolt-icon lucide-bolt" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/>
            <circle cx="12" cy="12" r="4"/>
        </svg>
        <svg class="close-icon lucide lucide-circle-x-icon lucide-circle-x" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"/>
            <path d="m15 9-6 6"/>
            <path d="m9 9 6 6"/>
        </svg>
    </button>
</div>

@code {
    private int StartHealth { get; set; } = 20;
    private const int VibrationDuration = 30;

    private int topPlayerHealth;
    private int bottomPlayerHealth;

    private int topPlayerChangeCounter = 0;
    private int bottomPlayerChangeCounter = 0;
    private bool topPlayerHasChanged = false;
    private bool bottomPlayerHasChanged = false;
    private Timer? topPlayerChangeTimer;
    private Timer? bottomPlayerChangeTimer;

    private bool topPlayerTopPressed = false;
    private bool topPlayerBottomPressed = false;
    private bool bottomPlayerTopPressed = false;
    private bool bottomPlayerBottomPressed = false;

    private bool isLongPress = false;
    private bool isRollCloseClicked = false;
    private bool isRollContentHidden = false;
    private bool isHistoryOpen = false;
    private string buildNumber = "dev";
    
    public string BuildNumber => buildNumber;
    
    private List<HealthChange> healthHistory = new();
        
    public class HealthChange
    {
        public bool IsTopPlayer { get; set; }
        public int ChangeAmount { get; set; }
        public int NewHealth { get; set; }
    }

    private void ToggleQuickMenu()
    {
        // Don't toggle quick menu if advanced menu was opened via long press
        if (isAdvancedLongPress)
        {
            isAdvancedLongPress = false;
            return;
        }
        
        isQuickMenuOpen = !isQuickMenuOpen;
        StateHasChanged();
    }

    private bool isAdvancedLongPress = false;

    private async void HandleToggleButtonPointerDown()
    {
        isAdvancedLongPress = false;
        // Start long press timer for advanced menu
        await JS.InvokeVoidAsync("startLongPress", DotNetObjectReference.Create(this), "advanced");
    }

    private async void HandleToggleButtonPointerUp()
    {
        // Cancel long press timer
        await JS.InvokeVoidAsync("cancelLongPress");
    }

    private async void HandleToggleButtonPointerLeave()
    {
        // Cancel long press timer
        await JS.InvokeVoidAsync("cancelLongPress");
    }

    private async void HandlePointerDown(bool isTopPlayer, bool isTop, bool pressed)
    {
        SetPressed(isTopPlayer, isTop, pressed);
        isLongPress = false;
        
        // Start long press timer
        await JS.InvokeVoidAsync("startLongPress", DotNetObjectReference.Create(this), isTop);
        
        // Force enable wake lock on user interaction for better browser compatibility
        try
        {
            await JS.InvokeVoidAsync("wakeLockManager.forceEnable");
        }
        catch
        {
            // Silently handle wake lock failures
        }
    }

    private async void HandlePointerUp(bool isTopPlayer, bool isTop, bool pressed)
    {
        SetPressed(isTopPlayer, isTop, pressed);
        
        // Cancel long press and handle short press
        await JS.InvokeVoidAsync("cancelLongPress");
        
        if (!isLongPress)
        {
            if (isTop)
                IncreaseHealth(isTopPlayer);
            else
                DecreaseHealth(isTopPlayer);
        }
    }

    private async void HandlePointerLeave(bool isTopPlayer, bool isTop, bool pressed)
    {
        SetPressed(isTopPlayer, isTop, pressed);
        await JS.InvokeVoidAsync("cancelLongPress");
    }

    [JSInvokable]
    public void OnLongPress(bool isIncrease)
    {
        isLongPress = true;
        // Determine which player and zone based on current state
        bool isTopPlayer = topPlayerTopPressed || topPlayerBottomPressed;
        bool isTop = topPlayerTopPressed || bottomPlayerTopPressed;
        
        LongPressHealth(isTopPlayer, isIncrease);
    }

    [JSInvokable]
    public void OnLongPressAdvanced()
    {
        // Open advanced menu on long press of toggle button
        isAdvancedLongPress = true;
        isAdvancedOpen = true;
        StateHasChanged();
    }

    private async void SetPressed(bool isTopPlayer, bool isTop, bool pressed)
    {
        if (isTopPlayer)
        {
            if (isTop) topPlayerTopPressed = pressed;
            else topPlayerBottomPressed = pressed;
        }
        else
        {
            if (isTop) bottomPlayerTopPressed = pressed;
            else bottomPlayerBottomPressed = pressed;
        }
        if (pressed)
        {
            await JS.InvokeVoidAsync("vibrate", VibrationDuration);
        }
    }

    private async void IncreaseHealth(bool isTopPlayer)
    {
        if (isTopPlayer)
        {
            topPlayerHealth++;
            UpdateChangeCounter(true, 1);
        }
        else
        {
            bottomPlayerHealth++;
            UpdateChangeCounter(false, 1);
        }
        
        await JS.InvokeVoidAsync("playHealthIncrease");
    }

    private async void DecreaseHealth(bool isTopPlayer)
    {
        if (isTopPlayer)
        {
            topPlayerHealth--;
            UpdateChangeCounter(true, -1);
        }
        else
        {
            bottomPlayerHealth--;
            UpdateChangeCounter(false, -1);
        }
        
        await JS.InvokeVoidAsync("playHealthDecrease");
    }

    private async void LongPressHealth(bool isTopPlayer, bool isIncrease)
    {
        int change = isIncrease ? 10 : -10;
        if (isTopPlayer)
        {
            topPlayerHealth += change;
            UpdateChangeCounter(true, change);
        }
        else
        {
            bottomPlayerHealth += change;
            UpdateChangeCounter(false, change);
        }
        
        await JS.InvokeVoidAsync(isIncrease ? "playHealthIncrease" : "playHealthDecrease");
    }

    private void UpdateChangeCounter(bool isTopPlayer, int change)
    {
        if (isTopPlayer)
        {
            topPlayerChangeCounter += change;
            topPlayerHasChanged = true;
            StartChangeTimer(true);
        }
        else
        {
            bottomPlayerChangeCounter += change;
            bottomPlayerHasChanged = true;
            StartChangeTimer(false);
        }
        StateHasChanged();
    }

    private void StartChangeTimer(bool isTopPlayer)
    {
        const int ChangeTimerDuration = 1500; // Milliseconds

        if (isTopPlayer)
        {
            topPlayerChangeTimer?.Dispose();
            topPlayerChangeTimer = new Timer(ChangeTimerDuration);
            topPlayerChangeTimer.Elapsed += (sender, e) => ResetChangeCounter(true);
            topPlayerChangeTimer.AutoReset = false;
            topPlayerChangeTimer.Start();
        }
        else
        {
            bottomPlayerChangeTimer?.Dispose();
            bottomPlayerChangeTimer = new Timer(ChangeTimerDuration);
            bottomPlayerChangeTimer.Elapsed += (sender, e) => ResetChangeCounter(false);
            bottomPlayerChangeTimer.AutoReset = false;
            bottomPlayerChangeTimer.Start();
        }
    }

    private void ResetChangeCounter(bool isTopPlayer)
    {
        if (isTopPlayer)
        {
            // Record the bundled change before resetting
            if (topPlayerChangeCounter != 0)
            {
                RecordHealthChange(true, topPlayerChangeCounter, topPlayerHealth);
            }
            topPlayerChangeCounter = 0;
            topPlayerHasChanged = false;
        }
        else
        {
            // Record the bundled change before resetting
            if (bottomPlayerChangeCounter != 0)
            {
                RecordHealthChange(false, bottomPlayerChangeCounter, bottomPlayerHealth);
            }
            bottomPlayerChangeCounter = 0;
            bottomPlayerHasChanged = false;
        }
        
        InvokeAsync(StateHasChanged);
    }

    private async void RollDice()
    {
        // Generate random numbers between 1 and 100
        var random = new Random();
        do
        {
            topPlayerRoll = random.Next(1, 101);
            bottomPlayerRoll = random.Next(1, 101);
        } while (topPlayerRoll == bottomPlayerRoll); // Ensure numbers are different
        
        // Enable roll mode and close popup
        isRollMode = true;
        isQuickMenuOpen = false;
        
        // Play roll sound effect
        await JS.InvokeVoidAsync("playRollSound");
        
        // Ensure UI updates
        await InvokeAsync(StateHasChanged);
    }

    private async void CloseRoll()
    {
        // Hide the roll content immediately
        isRollContentHidden = true;
        StateHasChanged();
        
        // Trigger the close button animation
        isRollCloseClicked = true;
        StateHasChanged();
        
        // Wait for animation to complete
        await Task.Delay(300);
        
        // Close the roll overlay
        isRollMode = false;
        topPlayerRoll = 0;
        bottomPlayerRoll = 0;
        isRollCloseClicked = false;
        isRollContentHidden = false;
        
        // Ensure UI updates
        await InvokeAsync(StateHasChanged);
    }

    private void OpenHistory()
    {
        isHistoryOpen = true;
        // Close the quick menu when history is opened
        isQuickMenuOpen = false;
        StateHasChanged();
        
        // Scroll to bottom after the DOM has updated
        Task.Delay(100).ContinueWith(_ => InvokeAsync(async () =>
        {
            await JS.InvokeVoidAsync("scrollHistoryToBottom");
        }));
    }

    private void CloseHistory()
    {
        isHistoryOpen = false;
        StateHasChanged();
    }

    private void OpenSettings()
    {
        isSettingsOpen = true;
        StateHasChanged();
    }

    private void HandleSettingsOpenChanged(bool isOpen)
    {
        isSettingsOpen = isOpen;
        // Close the quick menu when settings are closed
        if (!isOpen)
        {
            isQuickMenuOpen = false;
        }
        StateHasChanged();
    }

    private void HandleAdvancedOpenChanged(bool isOpen)
    {
        isAdvancedOpen = isOpen;
        StateHasChanged();
    }

    private async Task HandleFontChanged(string fontName)
    {
        await JS.InvokeVoidAsync("changeFont", fontName);
        StateHasChanged();
    }

    private Task HandleStartLifeChanged(int newStartLife)
    {
        // Update the start health for new games
        StartHealth = newStartLife;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void RecordHealthChange(bool isTopPlayer, int changeAmount, int newHealth)
    {
        healthHistory.Add(new HealthChange
        {
            IsTopPlayer = isTopPlayer,
            ChangeAmount = changeAmount,
            NewHealth = newHealth
        });
    }

    private async void ResetHealth()
    {
        topPlayerHealth = StartHealth;
        bottomPlayerHealth = StartHealth;
        
        // Reset change counters and hide them
        topPlayerChangeCounter = 0;
        bottomPlayerChangeCounter = 0;
        topPlayerHasChanged = false;
        bottomPlayerHasChanged = false;
        
        // Clear health history
        healthHistory.Clear();
        
        // Stop any running timers
        topPlayerChangeTimer?.Dispose();
        bottomPlayerChangeTimer?.Dispose();
        
        // Play reset sound effect
        await JS.InvokeVoidAsync("playResetSound");
        
        // Close the popup
        isQuickMenuOpen = false;
        
        // Ensure UI updates
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        topPlayerChangeTimer?.Dispose();
        bottomPlayerChangeTimer?.Dispose();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Enable wake lock after first render
            try
            {
                await JS.InvokeVoidAsync("wakeLockManager.enable");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to enable wake lock: {ex.Message}");
            }

            // Get build number
            try
            {
                buildNumber = await JS.InvokeAsync<string>("getBuildNumber");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to get build number: {ex.Message}");
                buildNumber = "dev";
            }

            // Load start life preference and initialize player health
            try
            {
                var startLifePreference = await JS.InvokeAsync<int>("getStartLifePreference");
                StartHealth = startLifePreference;
                topPlayerHealth = StartHealth;
                bottomPlayerHealth = StartHealth;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load start life preference: {ex.Message}");
                // Use default values
                topPlayerHealth = StartHealth;
                bottomPlayerHealth = StartHealth;
            }
        }
    }
}
